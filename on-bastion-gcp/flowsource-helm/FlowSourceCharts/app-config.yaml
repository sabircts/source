appconfig: |-
  app:
    title: Cognizant Flowsource
    baseUrl: ${FLOWSOURCE_BASE_URL}
    signInAuthProvider: "github" # For specific ProxiedSignInPage use

  organization:
    name: "Flowsource"

  backend:
    # Used for enabling authentication, secret is shared by all backend plugins
    # See https://backstage.io/docs/auth/service-to-service-auth for
    # information on the format
    auth:
      keys:
        - secret: ${BACKEND_SECRET}
    baseUrl: ${FLOWSOURCE_BASE_URL}
    listen:
      port: 7007
      # Uncomment the following host directive to bind to specific interfaces
      # host: 127.0.0.1
    csp:
      upgrade-insecure-requests: false
      connect-src: ["'self'", 'http:', 'https:']
      # frame-src:

      # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
      # Default Helmet Content-Security-Policy values can be removed by setting the key to false
      img-src:
        # "'self'" and 'data' are from the backstage default but must be set since img-src is overriden
        - "'self'"
        - 'data:'
        # Allow your Jira instance for @roadiehq/backstage-plugin-jira
        - ${JIRA_TARGET}
    cors:
      origin: http://10.10.0.2
      methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
      credentials: true

    # config options: https://node-postgres.com/api/client
    database:
      client: pg
      connection:
        host: ${POSTGRES_SERVICE_HOST_FLOWSOURCE_ADB}
        port: ${POSTGRES_SERVICE_PORT_FLOWSOURCE_ADB}
        user: ${POSTGRES_USER_FLOWSOURCE_ADB}
        password: ${POSTGRES_PASSWORD_FLOWSOURCE_ADB}
        ssl:
          require: true
          rejectUnauthorized: true
          servername: unused
          ca:      
            $file: /app/configurations/alloydb-ca.crt

  integrations:
    github:
      - host: github.com
        # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
        # about setting up the GitHub integration here: https://backstage.io/docs/getting-started/configuration#setting-up-a-github-integration
        token: ${GITHUB_TOKEN}
      ### Example for how to add your GitHub Enterprise instance using the API:
      # - host: ghe.example.net
      #   apiBaseUrl: https://ghe.example.net/api/v3
      #   token: ${GHE_TOKEN}

  #proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # endpoints:
  #   '/test':
  #     target: 'https://example.com'
  #     changeOrigin: true

  # Reference documentation http://backstage.io/docs/features/techdocs/configuration
  # Note: After experimenting with basic setup, use CI/CD to generate docs
  # and an external cloud storage when deploying TechDocs for production use-case.
  # https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
  techdocs:
    builder: 'local' # Alternatives - 'external'
    generator:
      runIn: 'local' # Alternatives - 'docker'
    publisher:
      # techdocs.publisher.type can be - 'local' or 'googleGcs' or 'awsS3' or 'azureBlobStorage'.
      # When set to 'local', techdocs-backend will create a 'static' directory at its root to store generated documentation files.
      # When set to 'googleGcs', techdocs-backend will use a Google Cloud Storage Bucket to store generated documentation files.
      # When set to 'awsS3', techdocs-backend will use an Amazon Web Service (AWS) S3 bucket to store generated documentation files.
      type: 'googleGcs'
      googleGcs:
        bucketName: 'flowsource-techdocs-backend'
        credentials: ${GOOGLE_APPLICATION_CREDENTIALS}

  auth:
    # see https://backstage.io/docs/auth/ to learn about auth providers
    environment: development
    providers:
      github:
        development:
          clientId: ${FSTEST_AUTH_GITHUB_CLIENT_ID}
          clientSecret: ${FSTEST_AUTH_GITHUB_CLIENT_SECRET}
          githubOrganization: ${FSTEST_AUTH_GITHUB_ORGANIZATION}
      gcp-iap:
        audience: ${GCP_IAP_AUDIENCE}
        signIn:
          resolvers:
            - resolver: emailMatchingUserEntityProfileEmail
            - resolver: emailLocalPartMatchingUserEntityName
            - resolver: emailMatchingUserEntityAnnotation
    autologout:
      enabled: true
      idleTimeoutMinutes: 30
      promptBeforeIdleSeconds: 15
      logoutIfDisconnected: true
      useWorkerTimers: false

  scaffolder:
    # see https://backstage.io/docs/features/software-templates/configuration for software template options

  catalog:
    import:
      entityFilename: catalog-info.yaml
      pullRequestBranchName: backstage-integration
    rules:
    - allow: [Component, System, API, Resource, Location]
    # See https://backstage.io/docs/features/software-catalog/#adding-components-to-the-catalog for more details
    # on how to get entities into the catalog.
    locations:

      # Local example data, file locations are relative to the backend process, typically `packages/backend`
    - type: file
      target: ../../examples/entities.yaml

      # Local example template
    - type: file
      target: ../../examples/template/template.yaml
      rules:
      - allow: [Template]

    # Local example organizational data
    - type: file
      target: ../../examples/org.yaml
      rules:
      - allow: [User, Group]

    ## Uncomment these lines to add more example data
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

    # # Uncomment these lines to add an example org
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
    #   rules:
    #     - allow: [User, Group]

    - type: file
      target: /app/configurations/all-configurations.yaml
      rules:
      - allow: [User, Group, Template]

  ###############################################<BEGIN Added For JIRA>#########################################################
  jiracustom:
    jiraUserEmail: 'syam.sankar2@cognizant.com'
    jiraAccessKey: 'ATATT3xFfGF0vd6jeIfXSzXo5FS7NonaKKjmZsnQCvQ6I_XMUCNIqFIM1ULOFOYKss2zG5Y-AjGu9hBVHDLwskR8_qm33K66Z6zAzSKiuyYcel7j4dkBJNzcftLi6uQ2z0YMNWd74z36lkOkMRS3QMGizuYD9qFAON_4zXNqr9uVJhCrry-jHz4=12E0734D'
    jiraBaseUrl: 'https://cognizantproducts.atlassian.net/rest/api/3/'
    jiraStoryPointsField: 'Story Points'
    jiraAssignedToMeFilter: true

  ###############################################< Added For JIRA END>#########################################################
  ##############################################< Added For Sonarqube Start >#########################################################
  sonarqube:
    baseUrl: 'https://codeinspect.codehub.cognizantproducts.com'
    apiKey: squ_5d0668a9e1691f1c7139ff93fb4d3d15a6ef9d74
  ##############################################< Added For SERVICENOW START ########################################################
  serviceNow:
    username: '2144318'
    password: 'NorwegianSharkOslo@123'
    instanceUrl: 'https://cognizantopsdev.service-now.com'
  ###############################################< Added For SERVICENOW END ########################################################
  ##############################################<BEGIN Added For GitHub>#########################################################
  githubActions:
    baseUrl: 'https://api.github.com/repos'
  ###############################################< Added For GitHub END>#########################################################
