appconfig: |-
  app:
  title: Cognizant Flowsource
  baseUrl: http://localhost:3000
  # To include appropriate sign in page (For having logic in App.tsx)
  signInAuthProvider: "github" # For specific ProxiedSignInPage use

  organization:
    name: "Flowsource"

  permission:
    enabled: false

  backend:
    # Used for enabling authentication, secret is shared by all backend plugins
    # See https://backstage.io/docs/auth/service-to-service-auth for
    # information on the format
    auth:
      keys:
        - secret: UfR8Ilbx9W6rtXxn4d2suisVkW5bzd6/
      # externalAccess:
      #   - type: static
      #     options:
      #       token: ${ROLE_RESTAPI_APIKEY}
      #       subject: roleMapping-access
      #     accessRestrictions:
      #       - plugin: flowsource-core
    baseUrl: http://localhost:7007
    listen:
      port: 7007
      # Uncomment the following host directive to bind to specific interfaces
      # host: 127.0.0.1
    csp:
      upgrade-insecure-requests: false
      connect-src: ["'self'", 'http:', 'https:']
      frame-src: ["'self'", 'https://us-west-2.quicksight.aws.amazon.com/']
      # frame-src: 

      # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
      # Default Helmet Content-Security-Policy values can be removed by setting the key to false
      img-src:
      # "'self'" and 'data' are from the backstage default but must be set since img-src is overriden
      - "'self'"
      - 'data:'
      # Allow your Jira instance for @roadiehq/backstage-plugin-jira
      - ${JIRA_TARGET}
    cors:
      origin: http://localhost:3000
      methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
      credentials: true

    # config options: https://node-postgres.com/api/client
    database:
      client: pg
      connection:
        host: ${POSTGRES_SERVICE_HOST_FLOWSOURCE_ADB}
        port: ${POSTGRES_SERVICE_PORT_FLOWSOURCE_ADB}
        user: ${POSTGRES_USER_FLOWSOURCE_ADB}
        password: ${POSTGRES_PASSWORD_FLOWSOURCE_ADB}
        ssl:
          require: true
          rejectUnauthorized: true
          servername: unused
          ca:      
            $file: /app/configurations/alloydb-ca.crt
  
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

  integrations:
    github:
      - host: github.com
        # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
        # about setting up the GitHub integration here: https://backstage.io/docs/getting-started/configuration#setting-up-a-github-integration
        # Either use the below token or config under integration.github.apps: section for setting up the integrations with GitHub 
        token: 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

      ### Example for how to add your GitHub Enterprise instance using the API:
      # - host: ghe.example.net
      #   apiBaseUrl: https://ghe.example.net/api/v3
      #   token: ${GHE_TOKEN}
        # apps:
        #   - appId: ${INTEGRATIONS_GITHUB_APP_APP_ID}
        #     clientId: ${INTEGRATIONS_GITHUB_APP_CLIENT_ID}
        #     clientSecret: ${INTEGRATIONS_GITHUB_APP_CLIENT_SECRET}
        #     privateKey: ${INTEGRATIONS_GITHUB_APP_PRIVATE_KEY}
        #     webhookSecret: ${INTEGRATIONS_GITHUB_APP_WEBHOOK_SECRET}

  #proxy:
    ### Example for how to add a proxy endpoint for the frontend.
    ### A typical reason to do this is to handle HTTPS and CORS for internal services.
    # endpoints:
    #   '/test':
    #     target: 'https://example.com'
    #     changeOrigin: true

  # Reference documentation http://backstage.io/docs/features/techdocs/configuration
  # Note: After experimenting with basic setup, use CI/CD to generate docs
  # and an external cloud storage when deploying TechDocs for production use-case.
  # https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
  techdocs:
    builder: 'local' # Alternatives - 'external'
    generator:
      runIn: 'local' # Alternatives - 'docker'
    publisher:
      # techdocs.publisher.type can be - 'local' or 'googleGcs' or 'awsS3' or 'azureBlobStorage'.
      # When set to 'local', techdocs-backend will create a 'static' directory at its root to store generated documentation files.
      # When set to 'googleGcs', techdocs-backend will use a Google Cloud Storage Bucket to store generated documentation files.
      # When set to 'awsS3', techdocs-backend will use an Amazon Web Service (AWS) S3 bucket to store generated documentation files.
      type: 'local'

  # dora:
  #   insights:
  #     lastMonthsLimit: 4
  #     cloudProvider: ${INSIGHTS_CLOUDPROVIDER}
  #     aws:
  #       database: ${INSIGHTS_REDSHIFT_DATABASE}
  #       clusterIdentifier: ${INSIGHTS_REDSHIFT_CLUSTER_IDENTIFIER}
  #       workgroupName: ${INSIGHTS_REDSHIFT_SERVERLESS_WORKGROUP_NAME}
  #       secretArn: ${INSIGHTS_REDSHIFT_SERVERLESS_SECRET_ARN}
  #       schema: ${INSIGHTS_REDSHIFT_SCHEMA}
  #       dbUser: ${INSIGHTS_REDSHIFT_DB_USER}
  #       region: ${INSIGHTS_REDSHIFT_REGION}
  #       accessKeyId: ${INSIGHTS_REDSHIFT_AWS_ACCESS_KEY}
  #       secretAccessKey: ${INSIGHTS_REDSHIFT_AWS_SECRET_KEY}
  #     azure:
  #       host: ${INSIGHTS_AZURE_DB_HOST}                    
  #       port: ${INSIGHTS_AZURE_DB_PORT}                                                                                  
  #       user: ${INSIGHTS_AZURE_DB_USER}                                                                                  
  #       password: ${INSIGHTS_AZURE_DB_PASSWORD}                                                                       
  #       database: ${INSIGHTS_AZURE_DB_DATABASE}
  #       schema: ${INSIGHTS_AZURE_DB_SCHEMA}
  #     gcp:
  #       dataset_name: ${INSIGHTS_GCS_DATASET_NAME}
  #       projectId: ${INSIGHTS_GCS_PROJECT_ID}


  auth:
    # see https://backstage.io/docs/auth/ to learn about auth providers
    environment: development
    # session:
    #   secret: ${AUTH_SESSION_SECRET}    
    providers:
      github:
        development:
          clientId: Ov23liQ2aR9PFqMBsDQv
          clientSecret: e7b9132bcc4cccc84a1f21f85f1e86176e06bb7a
          githubOrganization: CognizantCodeHub
  #    cognito: #This needs to un-commented when key cloak would be used as an IDP
  #      development:
  #        metadataUrl: ${AUTH_AWS_COGNITO_METADATA_URL}
  #        tokenUrl: ${AUTH_AWS_COGNITO_TOKEN_URL}
  #        authorizationUrl: ${AUTH_AWS_COGNITO_AUTHORIZATION_URL}
  #        clientId: ${AUTH_AWS_COGNITO_CLIENT_ID}
  #        clientSecret: ${AUTH_AWS_COGNITO_CLIENT_SECRET}
  #        prompt: auto
  #    keycloak: #This needs to un commented when key cloak would be used as an IDP
  #      development:
  #        metadataUrl: ${KEYCLOAK_METADATA_URL}
  #        tokenUrl: ${KEYCLOAK_TOKEN_URL}
  #        authorizationUrl: ${KEYCLOAK_AUTHORIZATION_URL}
  #        clientId: ${KEYCLOAK_CLIENT_ID}
  #        clientSecret: ${KEYCLOAK_CLIENT_SECRET}
  #        prompt: auto
    autologout:
      enabled: true
      idleTimeoutMinutes: 30
      promptBeforeIdleSeconds: 15
      logoutIfDisconnected: true
      useWorkerTimers: false
            
  scaffolder:
    # see https://backstage.io/docs/features/software-templates/configuration for software template options
    # actions:
    #   aws:
    #   - accessKeyId: ${CODECOMMIT_ACCESS_KEY}
    #     secretAccessKey: ${CODECOMMIT_SECRET} 
    #     roleArn: ${CODECOMMIT_ROLE_ARN}
    #     masterPipeline: ${AWS_MASTER_PIPELINE}
    #     region: ${CODECOMMIT_REGION}
        

  catalog:
    import:
      entityFilename: catalog-info.yaml
      pullRequestBranchName: backstage-integration
    rules:
      - allow: [Component, System, API, Resource, Location]
    # See https://backstage.io/docs/features/software-catalog/#adding-components-to-the-catalog for more details
    # on how to get entities into the catalog.
    locations:
      # Local example data, file locations are relative to the backend process, typically `packages/backend`
      - type: file
        target: ../../examples/entities.yaml

      # Local example template
      - type: file
        target: ../../examples/template/template.yaml
        rules:
          - allow: [Template]

      # Local example organizational data
      - type: file
        target: ../../examples/org.yaml
        rules:
          - allow: [User, Group]

      ## Uncomment these lines to add more example data
      # - type: url
      #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

      # # Uncomment these lines to add an example org
      # - type: url
      #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
      #   rules:
      #     - allow: [User, Group]

      - type: file
        target: /app/configurations/all-configurations.yaml
        rules:
          - allow: [User, Group, Template]
          
  ################################################<Added For Catalog Extended START>#########################################################
  # catalogExtended:
  #   scheduler:
  #     refreshInterval:
  #       hours: ${CATALOGEXTENDED_REFRESH_INTERVAL_HOURS}
  #       minutes: ${CATALOGEXTENDED_REFRESH_INTERVAL_MINUTES}
  #       seconds: ${CATALOGEXTENDED_REFRESH_INTERVAL_SECONDS}
  #     timeout:
  #       hours: ${CATALOGEXTENDED_TIMEOUT_HOURS}
  #       minutes: ${CATALOGEXTENDED_TIMEOUT_MINUTES}
  #       seconds: ${CATALOGEXTENDED_TIMEOUT_SECONDS}
  # catalogInfo:
  #   cloudProvider: ${CATALOG_INFO_CLOUD_PROVIDER}
  #   azure:
  #     storage_account_name: ${CATALOG_STORAGE_ACCOUNT_NAME}
  #     blob_container_name: ${CATALOG_BLOB_CONTAINER_NAME}
  #     blob_folder_name: ${CATALOG_BLOB_FOLDER_NAME}
  #     azure_client_id:  ${CATALOG_AZURE_CLIENT_ID}
  #     azure_tenant_id:  ${CATALOG_AZURE_TENANT_ID}
  #     azure_secret_key:  ${CATALOG_AZURE_SECRET_KEY}  
  #   awsS3:
  #     access_key_id: ${CATALOG_S3_ACCESS_KEY_iD}
  #     secret_access_key: ${CATALOG_S3_SECRET_ACCESS_KEY}
  #     s3_region: ${CATALOG_S3_REGION}
  #     s3_bucket_name: ${CATALOG_S3_BUCKET_NAME}
  #     s3_upload_path: ${CATALOG_S3_UPLOAD_PATH}
  #   googleGcs:
  #     gcs_bucket_name: ${CATALOG_GCS_BUCKET_NAME}
  #     gcs_upload_path: ${CATALOG_GCS_UPLOAD_PATH}
  #     gcs_projectId: ${CATALOG_GCS_PROJECT_ID}
  ################################################<Added For Catalog Extended END>#########################################################
  ###############################################< Added For JIRA END>#########################################################
  jiracustom:
    jiraUserEmail: 'syam.sankar2@cognizant.com'
    jiraAccessKey: 'ATATT3xFfGF0vd6jeIfXSzXo5FS7NonaKKjmZsnQCvQ6I_XMUCNIqFIM1ULOFOYKss2zG5Y-AjGu9hBVHDLwskR8_qm33K66Z6zAzSKiuyYcel7j4dkBJNzcftLi6uQ2z0YMNWd74z36lkOkMRS3QMGizuYD9qFAON_4zXNqr9uVJhCrry-jHz4=12E0734D'
    jiraBaseUrl: 'https://cognizantproducts.atlassian.net/rest/api/3/'
    jiraStoryPointsField: 'Story Points'
    jiraAssignedToMeFilter: true
  ##############################################< Added For Sonarqube Start >#########################################################
  sonarqube:
    baseUrl: 'https://codeinspect.codehub.cognizantproducts.com'
    apiKey: squ_5d0668a9e1691f1c7139ff93fb4d3d15a6ef9d74
  ##############################################< Added For Sonarqube End >#########################################################
  ##############################################< Added For SERVICENOW START ########################################################
  serviceNow:
    username: '2144318'
    password: 'NorwegianSharkOslo@123'
    instanceUrl: 'https://cognizantopsdev.service-now.com'
  ###############################################< Added For SERVICENOW END ########################################################
  ##############################################<BEGIN Added For GitHub>#########################################################
  githubActions:
    baseUrl: 'https://api.github.com/repos'
  ###############################################< Added For GitHub END>#########################################################
